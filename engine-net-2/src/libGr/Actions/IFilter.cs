/*
 * GrGen: graph rewrite generator tool -- release GrGen.NET 5.0
 * Copyright (C) 2003-2020 Universitaet Karlsruhe, Institut fuer Programmstrukturen und Datenorganisation, LS Goos; and free programmers
 * licensed under LGPL v3 (see LICENSE.txt included in the packaging of this file)
 * www.grgen.net
 */

// by Edgar Jakumeit

using System;
using System.Collections.Generic;

namespace de.unika.ipd.grGen.libGr
{
    /// <summary>
    /// A description of a filter of a rule or match class 
    /// </summary>
    public interface IFilter
    {
        /// <summary>
        /// The name of the filter (full name in case of an auto-generated filter, without package prefix) 
        /// </summary>
        String Name { get; }

        /// <summary>
        /// null if this is a global type, otherwise the package the type is contained in.
        /// Always null for auto-supplied and auto-generated filters.
        /// </summary>
        String Package { get; }

        /// <summary>
        /// The name of the type in case of a global type,
        /// the name of the type prefixed by the name of the package otherwise.
        /// Auto-supplied and auto-generated filters come without a package
        /// (they belong to a rule or match class, only those may be contained in a package).
        /// Gives the name string to be used in a call to denote the filter to be employed.
        /// </summary>
        String PackagePrefixedName { get; }

        /// <summary>
        /// The package the rule/match class is contained in the filter belongs to,
        /// i.e. the package of the applyee in a filter call.
        /// (TODO: this is a filter definition description, applyee does not make sense for it, is a concept from a filter call.)
        /// </summary>
        String PackageOfApplyee { get; }
    }

    /// <summary>
    /// A description of an auto-supplied filter
    /// </summary>
    public interface IFilterAutoSupplied : IFilter
    {
        /// <summary>
        /// An array of GrGen types corresponding to filter parameters.
        /// </summary>
        GrGenType[] Inputs { get; }

        /// <summary>
        /// An array of the names corresponding to filter parameters.
        /// </summary>
        String[] InputNames { get; }
    }

    /// <summary>
    /// A description of an auto-generated filter
    /// </summary>
    public interface IFilterAutoGenerated : IFilter
    {
        /// <summary>
        /// The name excluding the entity suffixes.
        /// (The name contains them appended in angles.)
        /// </summary>
        String PlainName { get; }

        /// <summary>
        /// The match entities the filter applies to
        /// </summary>
        List<String> Entities { get; }
    }

    /// <summary>
    /// A description of a filter function
    /// </summary>
    public interface IFilterFunction : IFilter
    {
        /// <summary>
        /// Tells whether the filter function is an externally defined one or an internal one 
        /// </summary>
        bool IsExternal { get; }

        /// <summary>
        /// An array of GrGen types corresponding to filter parameters.
        /// </summary>
        GrGenType[] Inputs { get; }

        /// <summary>
        /// An array of the names corresponding to filter parameters.
        /// </summary>
        String[] InputNames { get; }
    }
}

