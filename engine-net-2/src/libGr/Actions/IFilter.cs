/*
 * GrGen: graph rewrite generator tool -- release GrGen.NET 4.5
 * Copyright (C) 2003-2020 Universitaet Karlsruhe, Institut fuer Programmstrukturen und Datenorganisation, LS Goos; and free programmers
 * licensed under LGPL v3 (see LICENSE.txt included in the packaging of this file)
 * www.grgen.net
 */

// by Edgar Jakumeit

using System;
using System.Collections.Generic;

namespace de.unika.ipd.grGen.libGr
{
    /// <summary>
    /// A description of a filter of a rule or match class 
    /// (which gets generated based on an entity or a filter function -- this excludes auto-supplied filters,
    /// they are only available as filter calls; note that the package gives the implementation package,
    /// for auto-generated filters there is no package used in the filter call.)
    /// </summary>
    public interface IFilter
    {
        /// <summary>
        /// The name of the filter (plain name in case of auto-generated filter) 
        /// </summary>
        String Name { get; }

        /// <summary>
        /// null if this is a global type, otherwise the package the type is contained in.
        /// </summary>
        String Package { get; }

        /// <summary>
        /// The name of the type in case of a global type,
        /// the name of the type prefixed by the name of the package otherwise.
        /// </summary>
        String PackagePrefixedName { get; }

        /// <summary>
        /// The package the rule/match class is contained in the filter is applyed to.
        /// </summary>
        String PackageOfApplyee { get; }

        /// <summary>
        /// Returns whether the filter name given matches the filter.
        /// </summary>
        bool Matches(String name);
    }

    /// <summary>
    /// A description of an auto-supplied filter
    /// </summary>
    public interface IFilterAutoSupplied : IFilter
    {
        /// <summary>
        /// An array of GrGen types corresponding to filter parameters.
        /// </summary>
        GrGenType[] Inputs { get; }

        /// <summary>
        /// An array of the names corresponding to filter parameters.
        /// </summary>
        String[] InputNames { get; }
    }

    /// <summary>
    /// A description of an auto-generated filter
    /// </summary>
    public interface IFilterAutoGenerated : IFilter
    {
        /// <summary>
        /// The name including the entity suffixes (in angles, as they appear in sequence calls)
        /// </summary>
        String NameWithSuffix { get; }

        /// <summary>
        /// The match entities the filter applies to
        /// </summary>
        List<String> Entities { get; }
    }

    /// <summary>
    /// A description of a filter function
    /// </summary>
    public interface IFilterFunction : IFilter
    {
        /// <summary>
        /// Tells whether the filter function is an externally defined one or an internal one 
        /// </summary>
        bool IsExternal { get; }

        /// <summary>
        /// An array of GrGen types corresponding to filter parameters.
        /// </summary>
        GrGenType[] Inputs { get; }

        /// <summary>
        /// An array of the names corresponding to filter parameters.
        /// </summary>
        String[] InputNames { get; }
    }
}

