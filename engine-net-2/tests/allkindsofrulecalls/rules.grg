#using "model.gm"

rule init
{
	modify {
		:Node --> n1:N;
		:Node --> n2:N;
		:Node --> n3:N;
		
		m:M --> m;
		
		eval {
			n1.i = 1;
			n2.i = 2;
			n3.i = 3;
		}
	}
}

match class rs
{
	def var i:int;
} \ orderDescendingBy<i>

rule r implements rs
{
	n1:Node --> n2:N;
	
	def var i:int;
	yield {
		yield i = n2.i;
	}

	modify {
		delete(n1);
		n2b:M<n2>;
		:Node <-- n2b;
		eval {
			n2b.i = n2b.i + 1;
		}
	}
} \ orderDescendingBy<i>

rule s implements rs
{
	m:M --> m;

	def var i:int;
	yield {
		yield i = m.i;
	}

	modify {
		mb:N<m>;
		eval {
			mb.i = mb.i + 1;
		}
	}
}
