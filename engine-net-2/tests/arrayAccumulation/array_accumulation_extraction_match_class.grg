#using "array_model.gm"

rule init
{	
	modify {
		a:A; b:A; c:A; n:N;
		
		eval {
			a.intValue = 1;
			b.intValue = 2;
			c.intValue = 3;
			
			n.val = 42;
		}
	}
}

rule initDuplicate
{	
	modify {
		a:A; b:A; c:A; n:N;
		
		eval {
			a.intValue = 1;
			b.intValue = 2;
			c.intValue = 2;
			
			n.val = 42;
		}
	}
}

match class mc
{
	def var i:int;
	def var j:int;
}

rule r(var offset:int) implements mc
{
	a:A;
---
	def var i:int;
	def var j:int;

	yield {
		yield i = a.intValue;
		yield j = a.intValue + offset;
	}
	
	modify {
		n:Node;
	}
}

filter f<class mc>
{
	if(this.extract<i>().sum() > this.extract<j>().sum()) {
		this = deleteAll(this);
	}
}

filter fo<class mc>
{
	if(this.orderAscendingBy<i>().subarray(0, 2).extract<i>().sum() > this.orderAscendingBy<j>().subarray(0, 2).extract<j>().sum()) {
		this = deleteAll(this);
	}
}

filter fod<class mc>
{
	if(this.orderDescendingBy<i>().reverse().subarray(0, 2).extract<i>().sum() > this.orderDescendingBy<j>().reverse().subarray(0, 2).extract<j>().sum()) {
		this = deleteAll(this);
	}
}

filter fko<class mc>
{
	if(this.keepOneForEach<i>().extract<i>().sum() > this.keepOneForEach<j>().extract<j>().sum()) {
		this = deleteAll(this);
	}
}

function deleteAll(ref a:array<match<class mc>>) : array<match<class mc>>
{
	for(i:int in [0:a.size()-1])
	{
		a[i] = null;
	}
	return(a);
}

test tb(ref a:array<match<class mc>>)
{
	if{ a.extract<i>().sum() < a.extract<j>().sum(); }
}

test tbo(ref a:array<match<class mc>>)
{
	if{ a.orderAscendingBy<i>().subarray(0, 2).extract<i>().sum() < a.orderAscendingBy<j>().subarray(0, 2).extract<j>().sum(); }
}

test tbod(ref a:array<match<class mc>>)
{
	if{ a.orderDescendingBy<i>().reverse().subarray(0, 2).extract<i>().sum() < a.orderDescendingBy<j>().reverse().subarray(0, 2).extract<j>().sum(); }
}

test tbko(ref a:array<match<class mc>>)
{
	if{ a.keepOneForEach<i>().extract<i>().sum() < a.keepOneForEach<j>().extract<j>().sum(); }
}
