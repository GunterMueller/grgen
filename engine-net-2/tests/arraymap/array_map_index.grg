ref ::aa:array<int>;

rule array_map(ref a:array<int>, var val:double) : (array<double>) {
	if {
		a.map<double>{index_:int -> value:int -> value * 1.5}.sum() == val;
	}
	
	modify {
		return(a.map<double>{index_:int -> value:int -> value * Math::pi()});
	}
}

rule array_map_nested(ref a:array<int>, var val:double) : (array<double>) {
	if {
		a.map<double>{index_:int -> value:int -> value * a.map<double>{index_element:int -> element:int -> value}.sum()}.sum() == val;
	}
	
	modify {
		return(a.map<double>{index_:int -> value:int -> value * a.map<double>{index_element:int -> element:int -> value}.sum()});
	}
}

rule array_map2(ref a:array<Node>, var val:int) {
	if {
		a.map<double>{index_:int -> value:Node -> (nameof(value)!="$0" ? 1 : 0)}.sum() == val;
	}
	
	modify {
	---
		eval {
			def var y:int = 42;
			::aa = a.map<int>{index_:int -> value:Node -> (nameof(value)!="$0" ? 1 : 0) + y};
		}
	}
}

test array_map3(ref a:array<Node>, ref ai:array<string>) {
---
	def ref laa:array<string>;
	def ref laai:array<Node>;
	yield {
		yield laa = a.map<string>{index_:int -> value:Node -> nameof(value)};
		yield laai = ai.map<Node>{index_:int -> value:string -> nodeByName(value)};
	}
}

test array_map3_nested(ref a:array<Node>, ref ai:array<string>) {
---
	def ref laa:array<string>;
	yield {
		yield laa = ai.map<string>{index_:int -> value:string -> value + a.map<string>{index_element:int -> element:Node -> nameof(element)}.asString("-")};
	}
}

function array_map4(ref a:array<int>) : array<double> {
	return(a.map<double>{index_:int -> value:int -> value * Math::pi()});
}

procedure array_map5(ref a:array<Node>, var y:int) : (array<int>) {
	return(a.map<int>{index_:int -> value:Node -> (nameof(value)!="$0" ? 1 : 0) + y});
}

test t implements mc
{
	n:Node;
---
	def var attr:int = incident(n).size();
} \ orderAscendingBy<attr>

filter f<t>()
{
	def ref a:array<int> = this.map<int>{index_:int -> value:match<t> -> value.attr};
	for(i:int in [0:this.size()-1])
	{
		def ref m:match<t> = this[i];
		m.attr = this[i].attr + a[i];
	}
}

match class mc
{
	def var attr:int;
} \ orderAscendingBy<attr>

filter fmc<class mc>()
{
	def ref a:array<int> = this.map<int>{index_:int -> value:match<class mc> -> value.attr};
	for(i:int in [0:this.size()-1])
	{
		def ref m:match<class mc> = this[i];
		m.attr = this[i].attr + a[i];
	}
}

rule rexec : (array<int>, double)
{
	modify {
	---
		def ref x:array<int>;
		def var y:double;
		exec({yield x = [?t].map<int>{index_:int -> value:match<t> -> value.attr}});
		exec({yield y = [?t].map<int>{index_:int -> value:match<t> -> value.attr}.map<double>{index_:int -> value:int -> value * 1.5}.sum()});
		return(x,y);
	}
}

rule rexec_nested(ref a:array<int>) : (array<int>, int)
{
	modify {
	---
		def ref x:array<int>;
		def var y:int;
		exec({yield x = [?t].map<int>{index_:int -> value:match<t> -> value.attr + a.map<int>{index_element:int -> element:int -> element}.sum()}});
		exec({yield y = [?t].map<int>{index_:int -> value:match<t> -> value.attr + ::a37.map<int>{index_element:int -> element:int -> value.attr}.sum()}.sum()});
		return(x,y);
	}
}

rule array_map_index(ref a:array<string>) : (array<int>)
{
---
	def ref _aa:array<int>;
	yield {
		yield _aa = a.map<int>{index_:int -> value:string -> index_};
	}
	
	modify {
		return(a.map<int>{index_:int -> value:string -> index_});
	}
}

rule rexec_index : (array<int>)
{
	modify {
	---
		def ref x:array<int>;
		exec({yield x = [?t].map<int>{index_:int -> value:match<t> -> index_}});
		return(x);
	}
}
