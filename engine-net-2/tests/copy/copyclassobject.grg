using copyclassobject;

rule createTree
{
	modify {
		n:N -e:E-> n;
		
		eval {
			n.g = null;
			n.l = null;
			n.b = new Tree@(value = 1, left = new Tree@(value = 2, left = new Tree@(value = 3)), right = new Tree@(value = 4, right = new Tree@(value = 5)));
			n.gra = null;

			e.g = null;
			e.l = null;
			e.b = new Tree@(value = 1, left = new Tree@(value = 2, left = new Tree@(value = 3)), right = new Tree@(value = 4, right = new Tree@(value = 5)));
			e.gra = null;
		}
	}
}

test checkTree
{
	n:N -e:E-> n;
	
	if {
		n.g == null &&
		n.l == null &&
		n.b.value == 1 &&
		n.b.left.value == 2 &&
		n.b.left.left.value == 3 &&
		n.b.right.value == 4 &&
		n.b.right.right.value == 5 &&
		n.gra == null &&

		e.g == null &&
		e.l == null &&
		e.b.value == 1 &&
		e.b.left.value == 2 &&
		e.b.left.left.value == 3 &&
		e.b.right.value == 4 &&
		e.b.right.right.value == 5 &&
		e.gra == null;
	}
}

rule createGraph
{
	modify {
		n:N -e:E-> n;
		
		eval {
			n.g = null;
			n.l = null;
			n.b = null;
			n.gra = new Graph@(value = 1);
			def ref grra:Graph = n.gra;
			grra.children = array<Graph>[n.gra, new Graph@(value = 2, children = array<Graph>[n.gra])];

			e.g = null;
			e.l = null;
			e.b = null;
			e.gra = new Graph@(value = 1);
			def ref egrra:Graph = e.gra;
			egrra.children = array<Graph>[e.gra, new Graph@(value = 2, children = array<Graph>[e.gra])];
		}
	}
}

test checkGraph
{
	n:N -e:E-> n;
	
	if {
		n.g == null &&
		n.l == null &&
		n.b == null &&
		n.gra.value == 1 &&
		n.gra.children[0].value == 1 &&
		n.gra.children[0].children.size() == 2 &&
		n.gra.children[1].value == 2 &&
		n.gra.children[1].children.size() == 1 &&

		e.g == null &&
		e.l == null &&
		e.b == null &&
		e.gra.value == 1 &&
		e.gra.children[0].value == 1 &&
		e.gra.children[0].children.size() == 2 &&
		e.gra.children[1].value == 2 &&
		e.gra.children[1].children.size() == 1;
	}
}

rule copyClassObjectStructure
{
	n:N -e:E-> n;
	
	modify {
		nc:copy<n>;
		nc -ne:copy<e>-> nc;
	}
}

rule cloneClassObjectStructure
{
	n:N -e:E-> n;
	
	modify {
		nc:clone<n>;
		nc -ne:clone<e>-> nc;
	}
}
