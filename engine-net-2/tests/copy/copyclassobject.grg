using copyclassobject;

rule createTree
{
	modify {
		n:N -e:E-> n;
		
		eval {
			n.g = null;
			n.l = null;
			n.b = new Tree@(value = 1, left = new Tree@(value = 2, left = new Tree@(value = 3)), right = new Tree@(value = 4, right = new Tree@(value = 5)));
			n.gra = null;

			e.g = null;
			e.l = null;
			e.b = new Tree@(value = 1, left = new Tree@(value = 2, left = new Tree@(value = 3)), right = new Tree@(value = 4, right = new Tree@(value = 5)));
			e.gra = null;
		}
	}
}

procedure createTreePure() : (Tree)
{
	return(new Tree@(value = 1, left = new Tree@(value = 2, left = new Tree@(value = 3)), right = new Tree@(value = 4, right = new Tree@(value = 5))));
}

procedure createTreeArray() : (array<Tree>)
{
	return(array<Tree>[
		new Tree@(value = 1, left = new Tree@(value = 2, left = new Tree@(value = 3)), right = new Tree@(value = 4, right = new Tree@(value = 5))),
		new Tree@(value = 1, left = new Tree@(value = 2, left = new Tree@(value = 3)), right = new Tree@(value = 4, right = new Tree@(value = 5)))
	]);
}

procedure createTTreePure() : (TTree)
{
	return(new TTree@(value = 1, left = new TTree@(value = 2, left = new TTree@(value = 3)), right = new TTree@(value = 4, right = new TTree@(value = 5))));
}

procedure createTTreeArray() : (array<TTree>)
{
	return(array<TTree>[
		new TTree@(value = 1, left = new TTree@(value = 2, left = new TTree@(value = 3)), right = new TTree@(value = 4, right = new TTree@(value = 5))),
		new TTree@(value = 1, left = new TTree@(value = 2, left = new TTree@(value = 3)), right = new TTree@(value = 4, right = new TTree@(value = 5)))
	]);
}

test checkTree
{
	n:N -e:E-> n;
	
	if {
		n.g == null &&
		n.l == null &&
		n.b.value == 1 &&
		n.b.left.value == 2 &&
		n.b.left.left.value == 3 &&
		n.b.right.value == 4 &&
		n.b.right.right.value == 5 &&
		n.gra == null &&

		e.g == null &&
		e.l == null &&
		e.b.value == 1 &&
		e.b.left.value == 2 &&
		e.b.left.left.value == 3 &&
		e.b.right.value == 4 &&
		e.b.right.right.value == 5 &&
		e.gra == null;
	}
}

function checkTreePure(ref b:Tree) : boolean
{
	return(
		b.value == 1 &&
		b.left.value == 2 &&
		b.left.left.value == 3 &&
		b.right.value == 4 &&
		b.right.right.value == 5
	);
}

function checkTTreePure(ref b:TTree) : boolean
{
	return(
		b.value == 1 &&
		b.left.value == 2 &&
		b.left.left.value == 3 &&
		b.right.value == 4 &&
		b.right.right.value == 5
	);
}

rule createGraph
{
	modify {
		n:N -e:E-> n;
		
		eval {
			n.g = null;
			n.l = null;
			n.b = null;
			n.gra = new Graph@(value = 1);
			def ref grra:Graph = n.gra;
			grra.children = array<Graph>[n.gra, new Graph@(value = 2, children = array<Graph>[n.gra])];

			e.g = null;
			e.l = null;
			e.b = null;
			e.gra = new Graph@(value = 1);
			def ref egrra:Graph = e.gra;
			egrra.children = array<Graph>[e.gra, new Graph@(value = 2, children = array<Graph>[e.gra])];
		}
	}
}

procedure createGraphPure() : (Graph)
{
	def ref gra:Graph = new Graph@(value = 1);
	gra.children = array<Graph>[gra, new Graph@(value = 2, children = array<Graph>[gra])];
	return(gra);
}

test checkGraph
{
	n:N -e:E-> n;
	
	if {
		n.g == null &&
		n.l == null &&
		n.b == null &&
		n.gra.value == 1 &&
		n.gra.children[0].value == 1 &&
		n.gra.children[0].children.size() == 2 &&
		n.gra.children[1].value == 2 &&
		n.gra.children[1].children.size() == 1 &&

		e.g == null &&
		e.l == null &&
		e.b == null &&
		e.gra.value == 1 &&
		e.gra.children[0].value == 1 &&
		e.gra.children[0].children.size() == 2 &&
		e.gra.children[1].value == 2 &&
		e.gra.children[1].children.size() == 1;
	}
}

function checkGraphPure(ref gra:Graph) : boolean
{
	return(
		gra.value == 1 &&
		gra.children[0].value == 1 &&
		gra.children[0].children.size() == 2 &&
		gra.children[1].value == 2 &&
		gra.children[1].children.size() == 1
	);
}

rule copyClassObjectStructure
{
	n:N -e:E-> n;
	
	modify {
		nc:copy<n>;
		nc -ne:copy<e>-> nc;
	}
}

rule cloneClassObjectStructure
{
	n:N -e:E-> n;
	
	modify {
		nc:clone<n>;
		nc -ne:clone<e>-> nc;
	}
}

rule copyClassObjectStructure2
{
	n:N -e:E-> n;
	
	modify {
	---
		eval {
			(def nc:Node) = addCopy(n);
			addCopy(e, nc, nc);
		}
	}
}

rule cloneClassObjectStructure2
{
	n:N -e:E-> n;
	
	modify {
	---
		eval {
			(def nc:Node) = addClone(n);
			addClone(e, nc, nc);
		}
	}
}

function copyClassObjectStructureTree(ref b:Tree) : Tree
{
	return(copy(b));
}

function cloneClassObjectStructureTree(ref b:Tree) : Tree
{
	return(clone(b));
}

function copyClassObjectStructureTTree(ref b:TTree) : TTree
{
	return(copy(b));
}

function cloneClassObjectStructureTTree(ref b:TTree) : TTree
{
	return(clone(b));
}

function copyClassObjectStructureGraph(ref gra:Graph) : Graph
{
	return(copy(gra));
}

function cloneClassObjectStructureGraph(ref gra:Graph) : Graph
{
	return(clone(gra));
}

function copyClassObjectStructureTreeArray(ref arr:array<Tree>) : array<Tree>
{
	return(copy(arr));
}

function cloneClassObjectStructureTreeArray(ref arr:array<Tree>) : array<Tree>
{
	return(clone(arr));
}

function copyClassObjectStructureTTreeArray(ref arr:array<TTree>) : array<TTree>
{
	return(copy(arr));
}

function cloneClassObjectStructureTTreeArray(ref arr:array<TTree>) : array<TTree>
{
	return(clone(arr));
}

rule createDequeSetMapGroup
{
	modify {
		n:NDequeSetMap -e:EDequeSetMap-> n;
		
		eval {
			n.d = deque<Group>[new Group@(a = 1, b = 3.141592654, c = "Hallo Welt!")];
			n.s = set<Group>{new Group@(a = 2, b = 3.141592654, c = "Hallo Welt!")};
			n.m = map<Group,Group>{new Group@(a = 3, b = 3.141592654, c = "Hallo Welt!") -> new Group@(a = 4, b = 3.141592654, c = "Hallo Welt!")};

			e.d = deque<Group>[new Group@(a = 5, b = 3.141592654, c = "Hallo Krieg!")];
			e.s = set<Group>{new Group@(a = 6, b = 3.141592654, c = "Hallo Krieg!")};
			e.m = map<Group,Group>{new Group@(a = 7, b = 3.141592654, c = "Hallo Krieg!") -> new Group@(a = 8, b = 3.141592654, c = "Hallo Krieg!")};
		}
	}
}

rule cloneDequeSetMapGroup
{
	n:NDequeSetMap -e:EDequeSetMap-> n;
	
	modify {
		nc:clone<n>;
		nc -ne:clone<e>-> nc;
	}
}

rule copyDequeSetMapGroup
{
	n:NDequeSetMap -e:EDequeSetMap-> n;
	
	modify {
		nc:copy<n>;
		nc -ne:copy<e>-> nc;
	}
}


procedure createGroupDeque() : (deque<Group>)
{
	return(deque<Group>[
		new Group@(a = 1, b = 3.141592654, c = "Hallo Welt!"),
		new Group@(a = 2, b = 3.141592654, c = "Hallo Krieg!")
	]);
}

procedure createGroupSet() : (set<Group>)
{
	return(set<Group>{
		new Group@(a = 1, b = 3.141592654, c = "Hallo Welt!"),
		new Group@(a = 2, b = 3.141592654, c = "Hallo Krieg!")
	});
}

procedure createGroupMap() : (map<Group, Group>)
{
	return(map<Group, Group>{
		new Group@(a = 1, b = 3.141592654, c = "Hallo Welt!") -> new Group@(a = 2, b = 3.141592654, c = "Hallo Krieg!")
	});
}


procedure createTGroupDeque() : (deque<TGroup>)
{
	return(deque<TGroup>[
		new TGroup@(a = 1, b = 3.141592654, c = "Hallo Welt!"),
		new TGroup@(a = 2, b = 3.141592654, c = "Hallo Krieg!")
	]);
}

procedure createTGroupSet() : (set<TGroup>)
{
	return(set<TGroup>{
		new TGroup@(a = 1, b = 3.141592654, c = "Hallo Welt!"),
		new TGroup@(a = 2, b = 3.141592654, c = "Hallo Krieg!")
	});
}

procedure createTGroupMap() : (map<TGroup, TGroup>)
{
	return(map<TGroup, TGroup>{
		new TGroup@(a = 1, b = 3.141592654, c = "Hallo Welt!") -> new TGroup@(a = 2, b = 3.141592654, c = "Hallo Krieg!")
	});
}


function cloneGroupDeque(ref d:deque<Group>) : deque<Group>
{
	return(clone(d));
}

function copyGroupDeque(ref d:deque<Group>) : deque<Group>
{
	return(copy(d));
}

function cloneGroupSet(ref s:set<Group>) : set<Group>
{
	return(clone(s));
}

function copyGroupSet(ref s:set<Group>) : set<Group>
{
	return(copy(s));
}

function cloneGroupMap(ref m:map<Group, Group>) : map<Group, Group>
{
	return(clone(m));
}

function copyGroupMap(ref m:map<Group, Group>) : map<Group, Group>
{
	return(copy(m));
}


function cloneTGroupDeque(ref d:deque<TGroup>) : deque<TGroup>
{
	return(clone(d));
}

function copyTGroupDeque(ref d:deque<TGroup>) : deque<TGroup>
{
	return(copy(d));
}

function cloneTGroupSet(ref s:set<TGroup>) : set<TGroup>
{
	return(clone(s));
}

function copyTGroupSet(ref s:set<TGroup>) : set<TGroup>
{
	return(copy(s));
}

function cloneTGroupMap(ref m:map<TGroup, TGroup>) : map<TGroup, TGroup>
{
	return(clone(m));
}

function copyTGroupMap(ref m:map<TGroup, TGroup>) : map<TGroup, TGroup>
{
	return(copy(m));
}

