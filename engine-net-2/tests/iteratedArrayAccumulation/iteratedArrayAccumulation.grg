#using "iteratedArrayAccumulation.gm"

rule init {
	modify {
		n1:N; n2:N; n3:N;
		eval {
			n1.i = 1;
			n2.i = 2;
			n3.i = 3;
		}
	}
}

rule initDuplicate {
	modify {
		n1:N; n2:N; n3:N;
		eval {
			n1.i = 1;
			n2.i = 2;
			n3.i = 2;
		}
	}
}

test t
{
	iterated it
	{
		n:Node;
	}
---
	def var score:int = yield([?it].size());
	//def ref iters:array<match<t.it>> = yield([?it]);
	def ref nodes:array<Node> = yield([?it].extract<n>());
	def ref nodesSet:set<Node> = yield([?it].extract<n>().asSet());	
	//improved notation for:
	//def ref ns:set<Node>=set<Node>{};
	//yield {
	//  for(n in it) {
	//	  ns.add(n);
	//  }
	//}
}

test t2
{
	iterated it
	{
		n:N;
	---
		def var i:int = n.i;
	}
---
	def var score:int = yield([?it].extract<i>().sum());
	def ref itersSorted:array<match<t2.it>> = yield([?it].orderAscendingBy<i>());
	def ref itersSortedDescending:array<match<t2.it>> = yield([?it].orderDescendingBy<i>());
	def ref itersWithoutDuplicates:array<match<t2.it>> = yield([?it].keepOneForEach<i>());
	def ref itersGrouped:array<match<t2.it>> = yield([?it].groupBy<i>());
	//def ref itersSet:set<match<t2.it>> = yield(itersSorted.asSet());
}

rule r : (M)
{
	iterated it
	{
		n:N;
	---
		def var i:int = n.i;
		
		modify {
			delete(n);
		}
	} \ orderDescendingBy<i>
---
	iterated it\orderDescendingBy<i>\keepFirst(1);

	modify {
		m:M;
		
		eval {
			def var score:int = [?it].size();
			def ref iters:array<match<r.it>> = [?it];
			def ref nodes:array<N> = [?it].extract<n>();
			def ref nodesSet:set<N> = [?it].extract<n>().asSet();
			def var score2:int = [?it].extract<i>().sum();
			def ref itersSorted:array<match<r.it>> = [?it].orderAscendingBy<i>();
			def ref itersSortedDescending:array<match<r.it>> = [?it].orderDescendingBy<i>();
			def ref itersWithoutDuplicates:array<match<r.it>> = [?it].keepOneForEach<i>();
			def ref itersGrouped:array<match<r.it>> = [?it].groupBy<i>();
			//def ref itersSet:set<match<r.it>> = itersSorted.asSet();
			m.i = score + score2;
		}
		
		return (m);
	}
}

/*test tnested
{
	iterated it
	{
		n:Node;
		iterated itn {
			m:Node;
		}
	}
---
	def ref iters:array<match<t.it>> = yield([?it]);
	def ref iters:array<match<t.it.itn>> = yield([?it][0].itn);
}*/
