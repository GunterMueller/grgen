#using "model.gm"

rule init : (Node)
{
	modify {
		n:Node --> .;
		n --> .;
		n --> visit:Node;

		m:Node --> :M;
		m --> :M;
	
		eval {
			visit.visited = true;
		}
		
		return(n);
	}
}

rule r(start:Node)
{
	start --> n:Node;
	if{ !n.visited; }
	
	modify {
		delete(n);
	}
}

rule s : (M, M)
{
	root:Node --> m1:M;
	root --> m2:M;
	
	modify {
		:N<root>;
		return(m1,m2);
	}
} \ auto

sequence seq
{
	[[r(::n),(m1:array<M>,::m2)=s()\auto]]
	;> { emit("the value of variable \"m1\" of type M is: ", m1, "\n") }
	;> { emit("the value of variable \"m2\" of type M is: ", ::m2, "\n") }
}

test nodes()
{
	.;
}

sequence seqBacktrack
{
   <<[[r(::n),(m1:M,::m2)=s()\auto]];;
   { emit("the value of variable \"m1\" of type M is: ", m1, "\n") }
;> { emit("the value of variable \"m2\" of type M is: ", ::m2, "\n") }
;> count[nodes()]=>::numNodes ;> { ::numN = countNodes(N) } ;> { ::numM = countNodes(M) }
;> { emit("the value of variable \"numNodes\" of type int is: ", ::numNodes, "\n") }
;> { emit("the value of variable \"numN\" of type int is: ", ::numN, "\n") }
;> { emit("the value of variable \"numM\" of type int is: ", ::numM, "\n") }
;> false>>
}
