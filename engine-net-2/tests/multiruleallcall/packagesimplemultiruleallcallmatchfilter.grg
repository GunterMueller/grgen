#using "modelmulti.gm"

rule init
{
	modify {
		m1:M --> :Node --> n1:N;
		m2:M --> :Node --> n2:N;

		n3:N --> :Node --> m3:M;
		
		eval {
			m1.i = 1; n1.i = 1;
			m2.i = 2; n2.i = 2;
			
			m3.i = 2; n3.i = 2;
		}
	}
}

package Bla
{
	match class mc
	{
		n:N;
		m:M;
		var i:int;
		def var idef:int;
	} \ orderAscendingBy<idef>, orderDescendingBy<idef>, keepSameAsFirst<idef>, keepSameAsLast<idef>, keepOneForEach<idef>,
		orderDescendingBy<i>, keepOneForEach<i>, keepSameAsFirst<i>

	filter foutput<class mc>
	{
		emit("the value of variable \"foutput\" of type matchfilter is: Bla::matchfilter\n");
		for(m:match<class mc> in this)
		{
			def n:N = m.n;
			emit("the value of variable \"i\" of type int is: ", m.i, "\n");
			emit("the value of variable \"idef\" of type int is: ", m.idef, "\n");
		}
	}

	filter f<class mc>(var f:int)
	{
		emit("the value of variable \"f\" of type matchfilter is: Bla::matchfilter\n");
		for(m:match<class mc> in this)
		{
			def n:N = m.n;
			m.idef = n.i + f;
			emit("the value of variable \"n.i\" of type int is: ", n.i, "\n");
			emit("the value of variable \"idef\" of type int is: ", m.idef, "\n");
		}
	}

	filter frem<class mc>(var f:int)
	{
		emit("the value of variable \"frem\" of type matchfilter is: Bla::matchfilter\n");
		def var pos:int = 0;
		for(m:match<class mc> in this)
		{
			if(m.idef != f) {
				this[pos] = null;
			}
			pos = pos + 1;
		}
	}
	
	rule r(var i:int) : (int, int, int, int) implements mc, mcdef
	{
		m:M --> mid:Node --> n:N;
		
		def ndef:N;
		def mdef:M;
		def var idef:int;

		yield {
			yield ndef = n;
			yield mdef = m;
			yield idef = i;
		}
		
		modify {
			:R<mid>;
			return(m.i, n.i, i, idef);
		}
	}
	
	sequence seqmc
	{
		[[r(42),s(42)]]\mc.f(1)\mc.frem(2)
		;> { emit("the value of variable \"seqmc\" of type sequence is: Bla::seq\n") }
		;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
		;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
		;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
	}

	sequence seqmcdef
	{
		[[r(42),s(42)]]\mcdef.fdef(0)\mcdef.fremdef(44)
		;> { emit("the value of variable \"seqmcdef\" of type sequence is: Bla::seq\n") }
		;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
		;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
		;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
	}

	sequence seqmcmcdef
	{
		[[r(42),s(42)]]\mc.f(1)\mcdef.fdef(1)
		;> { emit("the value of variable \"seqmcmcdef\" of type sequence is: Bla::seq\n") }
		;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
		;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
		;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
	}

	sequence seqrem
	{
		[[r(42),s(42)]]\mc.frem(1)\mcdef.fremdef(2)
		;> { emit("the value of variable \"seqrem\" of type sequence is: Bla::seq\n") }
		;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
		;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
		;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
	}

	sequence seqmcBacktrack
	{
	   <<[[(::mi, ::ni, ::i, ::idef)=r(42),(::ni, ::mi, ::i, ::idef)=s(42)]]\mc.f(5)\mc.frem(6);;
		   { emit("the value of variable \"seqmcBacktrack\" of type sequence is: Bla::seq\n") }
		;> { emit("the value of variable \"mi\" of type int is: ", ::mi, "\n") }
		;> { emit("the value of variable \"ni\" of type int is: ", ::ni, "\n") }
		;> { emit("the value of variable \"i\" of type int is: ", ::i, "\n") }
		;> { emit("the value of variable \"idef\" of type int is: ", ::idef, "\n") }
		;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
		;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
		;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
		;> false>>
	}

	sequence seqmcdefBacktrack
	{
	   <<[[(::mi, ::ni, ::i, ::idef)=r(42),(::ni, ::mi, ::i, ::idef)=s(42)]]\mcdef.fdef(-2)\mcdef.fremdef(42);;
		   { emit("the value of variable \"seqmcdefBacktrack\" of type sequence is: Bla::seq\n") }
		;> { emit("the value of variable \"mi\" of type int is: ", ::mi, "\n") }
		;> { emit("the value of variable \"ni\" of type int is: ", ::ni, "\n") }
		;> { emit("the value of variable \"i\" of type int is: ", ::i, "\n") }
		;> { emit("the value of variable \"idef\" of type int is: ", ::idef, "\n") }
		;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
		;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
		;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
		;> false>>
	}

	sequence seqmcmcdefBacktrack
	{
	   <<[[(::mi, ::ni, ::i, ::idef)=r(42),(::ni, ::mi, ::i, ::idef)=s(42)]]\mc.f(1)\mcdef.fdef(10);;
		   { emit("the value of variable \"seqmcmcdefBacktrack\" of type sequence is: Bla::seq\n") }
		;> { emit("the value of variable \"mi\" of type int is: ", ::mi, "\n") }
		;> { emit("the value of variable \"ni\" of type int is: ", ::ni, "\n") }
		;> { emit("the value of variable \"i\" of type int is: ", ::i, "\n") }
		;> { emit("the value of variable \"idef\" of type int is: ", ::idef, "\n") }
		;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
		;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
		;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
		;> false>>
	}

	sequence seqremBacktrack
	{
	   <<[[(::mi, ::ni, ::i, ::idef)=r(42),(::ni, ::mi, ::i, ::idef)=s(42)]]\mc.frem(1)\mcdef.fremdef(2);;
		   { emit("the value of variable \"seqremBacktrack\" of type sequence is: Bla::seq\n") }
		;> { emit("the value of variable \"mi\" of type int is: ", ::mi, "\n") }
		;> { emit("the value of variable \"ni\" of type int is: ", ::ni, "\n") }
		;> { emit("the value of variable \"i\" of type int is: ", ::i, "\n") }
		;> { emit("the value of variable \"idef\" of type int is: ", ::idef, "\n") }
		;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
		;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
		;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
		;> false>>
	}

	sequence seqOrderAscending
	{
		[[r(42),s(42)]]\mc.f(0)\mc.orderAscendingBy<idef>\mc.foutput
		;> { emit("the value of variable \"seqOrderAscending\" of type sequence is: Bla::seq\n") }
	}

	sequence seqOrderDescending
	{
		[[r(42),s(42)]]\mc.f(0)\mc.orderDescendingBy<idef>\mc.foutput
		;> { emit("the value of variable \"seqOrderDescending\" of type sequence is: Bla::seq\n") }
	}

	sequence seqKeepSameAsFirst
	{
		[[r(42),s(42)]]\mc.f(0)\mc.keepSameAsFirst<idef>\mc.foutput
		;> { emit("the value of variable \"seqKeepSameAsFirst\" of type sequence is: Bla::seq\n") }
	}

	sequence seqKeepSameAsLast
	{
		[[r(42),s(42)]]\mc.f(0)\mc.keepSameAsLast<idef>\mc.foutput
		;> { emit("the value of variable \"seqKeepSameAsLast\" of type sequence is: Bla::seq\n") }
	}

	sequence seqKeepOneForEach
	{
		[[r(42),s(42)]]\mc.f(0)\mc.keepOneForEach<idef>\mc.foutput
		;> { emit("the value of variable \"seqKeepOneForEach\" of type sequence is: Bla::seq\n") }
	}

	sequence seqFilterByVar
	{
		[[r(42),s(42)]]\mc.f(0)\mc.orderDescendingBy<i>\mc.keepOneForEach<i>\mc.keepSameAsFirst<i>\mc.foutput
		;> { emit("the value of variable \"seqFilterByVar\" of type sequence is: Bla::seq\n") }
	}

	sequence seqKeepFirst
	{
		[[r(42),s(42)]]\mc.f(0)\mc.keepFirst(2)\mc.foutput
		;> { emit("the value of variable \"seqKeepFirst\" of type sequence is: Bla::seq\n") }
	}

	sequence seqKeepLast
	{
		[[r(42),s(42)]]\mc.f(0)\mc.keepLast(2)\mc.foutput
		;> { emit("the value of variable \"seqKeepLast\" of type sequence is: Bla::seq\n") }
	}

	sequence seqKeepFirstFraction
	{
		[[r(42),s(42)]]\mc.f(0)\mc.keepFirstFraction(0.5)\mc.foutput
		;> { emit("the value of variable \"seqKeepFirstFraction\" of type sequence is: Bla::seq\n") }
	}

	sequence seqKeepLastFraction
	{
		[[r(42),s(42)]]\mc.f(0)\mc.keepLastFraction(0.5)\mc.foutput
		;> { emit("the value of variable \"seqKeepLastFraction\" of type sequence is: Bla::seq\n") }
	}

	sequence seqRemoveFirst
	{
		[[r(42),s(42)]]\mc.f(0)\mc.removeFirst(2)\mc.foutput
		;> { emit("the value of variable \"seqRemoveFirst\" of type sequence is: Bla::seq\n") }
	}

	sequence seqRemoveLast
	{
		[[r(42),s(42)]]\mc.f(0)\mc.removeLast(2)\mc.foutput
		;> { emit("the value of variable \"seqRemoveLast\" of type sequence is: Bla::seq\n") }
	}

	sequence seqRemoveFirstFraction
	{
		[[r(42),s(42)]]\mc.f(0)\mc.removeFirstFraction(0.5)\mc.foutput
		;> { emit("the value of variable \"seqRemoveFirstFraction\" of type sequence is: Bla::seq\n") }
	}

	sequence seqRemoveLastFraction
	{
		[[r(42),s(42)]]\mc.f(0)\mc.removeLastFraction(0.5)\mc.foutput
		;> { emit("the value of variable \"seqRemoveLastFraction\" of type sequence is: Bla::seq\n") }
	}
}

match class mcdef
{
	def ndef:N;
	def mdef:M;
	def var idef:int;
}

filter fdef<class mcdef>(var f:int)
{
	emit("the value of variable \"fdef\" of type matchfilter is: matchfilter\n");
	for(m:match<class mcdef> in this)
	{
		def ndef:N = m.ndef;
		m.idef = ndef.i + m.idef + f;
		emit("the value of variable \"ndef.i\" of type int is: ", ndef.i, "\n");
		emit("the value of variable \"idef\" of type int is: ", m.idef, "\n");
	}
}

filter fremdef<class mcdef>(var f:int)
{
	emit("the value of variable \"fremdef\" of type matchfilter is: matchfilter\n");
	def var pos:int = 0;
	for(m:match<class mcdef> in this)
	{
		if(m.idef != f) {
			this[pos] = null;
		}
		pos = pos + 1;
	}
}

rule s(var i:int) : (int, int, int, int) implements Bla::mc, mcdef
{
	n:N --> mid:Node --> m:M;

	def ndef:N;
	def mdef:M;
	def var idef:int;
	
	yield {
		yield ndef = n;
		yield mdef = m;
		yield idef = i;
	}
	
	modify {
		:S<mid>;
		return(n.i, m.i, i, idef);
	}
}

sequence seqmc
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(1)\Bla::mc.Bla::frem(2)
	;> { emit("the value of variable \"seqmc\" of type sequence is: seq\n") }
	;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
	;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
	;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
}

sequence seqmcdef
{
	[[Bla::r(42),s(42)]]\mcdef.fdef(0)\mcdef.fremdef(44)
	;> { emit("the value of variable \"seqmcdef\" of type sequence is: seq\n") }
	;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
	;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
	;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
}

sequence seqmcmcdef
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(1)\mcdef.fdef(1)
	;> { emit("the value of variable \"seqmcdef\" of type sequence is: seq\n") }
	;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
	;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
	;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
}

sequence seqrem
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::frem(1)\mcdef.fremdef(2)
	;> { emit("the value of variable \"seqrem\" of type sequence is: seq\n") }
	;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
	;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
	;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
}

sequence seqmcBacktrack
{
   <<[[(::mi, ::ni, ::i, ::idef)=Bla::r(42),(::ni, ::mi, ::i, ::idef)=s(42)]]\Bla::mc.Bla::f(5)\Bla::mc.Bla::frem(6);;
	   { emit("the value of variable \"seqmcBacktrack\" of type sequence is: seq\n") }
	;> { emit("the value of variable \"mi\" of type int is: ", ::mi, "\n") }
	;> { emit("the value of variable \"ni\" of type int is: ", ::ni, "\n") }
	;> { emit("the value of variable \"i\" of type int is: ", ::i, "\n") }
	;> { emit("the value of variable \"idef\" of type int is: ", ::idef, "\n") }
	;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
	;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
	;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
	;> false>>
}

sequence seqmcdefBacktrack
{
   <<[[(::mi, ::ni, ::i, ::idef)=Bla::r(42),(::ni, ::mi, ::i, ::idef)=s(42)]]\mcdef.fdef(-2)\mcdef.fremdef(42);;
	   { emit("the value of variable \"seqmcdefBacktrack\" of type sequence is: seq\n") }
	;> { emit("the value of variable \"mi\" of type int is: ", ::mi, "\n") }
	;> { emit("the value of variable \"ni\" of type int is: ", ::ni, "\n") }
	;> { emit("the value of variable \"i\" of type int is: ", ::i, "\n") }
	;> { emit("the value of variable \"idef\" of type int is: ", ::idef, "\n") }
	;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
	;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
	;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
	;> false>>
}

sequence seqmcmcdefBacktrack
{
   <<[[(::mi, ::ni, ::i, ::idef)=Bla::r(42),(::ni, ::mi, ::i, ::idef)=s(42)]]\Bla::mc.Bla::f(1)\mcdef.fdef(10);;
	   { emit("the value of variable \"seqmcmcdefBacktrack\" of type sequence is: seq\n") }
	;> { emit("the value of variable \"mi\" of type int is: ", ::mi, "\n") }
	;> { emit("the value of variable \"ni\" of type int is: ", ::ni, "\n") }
	;> { emit("the value of variable \"i\" of type int is: ", ::i, "\n") }
	;> { emit("the value of variable \"idef\" of type int is: ", ::idef, "\n") }
	;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
	;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
	;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
	;> false>>
}

sequence seqremBacktrack
{
   <<[[(::mi, ::ni, ::i, ::idef)=Bla::r(42),(::ni, ::mi, ::i, ::idef)=s(42)]]\Bla::mc.Bla::frem(1)\mcdef.fremdef(2);;
	   { emit("the value of variable \"seqremBacktrack\" of type sequence is: seq\n") }
	;> { emit("the value of variable \"mi\" of type int is: ", ::mi, "\n") }
	;> { emit("the value of variable \"ni\" of type int is: ", ::ni, "\n") }
	;> { emit("the value of variable \"i\" of type int is: ", ::i, "\n") }
	;> { emit("the value of variable \"idef\" of type int is: ", ::idef, "\n") }
	;> { emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
	;> { emit("the value of variable \"countNodesR\" of type int is: ", countNodes(R), "\n") }
	;> { emit("the value of variable \"countNodesS\" of type int is: ", countNodes(S), "\n") }
	;> false>>
}

sequence seqOrderAscending
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(0)\Bla::mc.orderAscendingBy<idef>\Bla::mc.Bla::foutput
	;> { emit("the value of variable \"seqOrderAscending\" of type sequence is: seq\n") }
}

sequence seqOrderDescending
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(0)\Bla::mc.orderDescendingBy<idef>\Bla::mc.Bla::foutput
	;> { emit("the value of variable \"seqOrderDescending\" of type sequence is: seq\n") }
}

sequence seqKeepSameAsFirst
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(0)\Bla::mc.keepSameAsFirst<idef>\Bla::mc.Bla::foutput
	;> { emit("the value of variable \"seqKeepSameAsFirst\" of type sequence is: seq\n") }
}

sequence seqKeepSameAsLast
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(0)\Bla::mc.keepSameAsLast<idef>\Bla::mc.Bla::foutput
	;> { emit("the value of variable \"seqKeepSameAsLast\" of type sequence is: seq\n") }
}

sequence seqKeepOneForEach
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(0)\Bla::mc.keepOneForEach<idef>\Bla::mc.Bla::foutput
	;> { emit("the value of variable \"seqKeepOneForEach\" of type sequence is: seq\n") }
}

sequence seqFilterByVar
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(0)\Bla::mc.orderDescendingBy<i>\Bla::mc.keepOneForEach<i>\Bla::mc.keepSameAsFirst<i>\Bla::mc.Bla::foutput
	;> { emit("the value of variable \"seqFilterByVar\" of type sequence is: seq\n") }
}

sequence seqKeepFirst
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(0)\Bla::mc.keepFirst(2)\Bla::mc.Bla::foutput
	;> { emit("the value of variable \"seqKeepFirst\" of type sequence is: seq\n") }
}

sequence seqKeepLast
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(0)\Bla::mc.keepLast(2)\Bla::mc.Bla::foutput
	;> { emit("the value of variable \"seqKeepLast\" of type sequence is: seq\n") }
}

sequence seqKeepFirstFraction
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(0)\Bla::mc.keepFirstFraction(0.5)\Bla::mc.Bla::foutput
	;> { emit("the value of variable \"seqKeepFirstFraction\" of type sequence is: seq\n") }
}

sequence seqKeepLastFraction
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(0)\Bla::mc.keepLastFraction(0.5)\Bla::mc.Bla::foutput
	;> { emit("the value of variable \"seqKeepLastFraction\" of type sequence is: seq\n") }
}

sequence seqRemoveFirst
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(0)\Bla::mc.removeFirst(2)\Bla::mc.Bla::foutput
	;> { emit("the value of variable \"seqRemoveFirst\" of type sequence is: seq\n") }
}

sequence seqRemoveLast
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(0)\Bla::mc.removeLast(2)\Bla::mc.Bla::foutput
	;> { emit("the value of variable \"seqRemoveLast\" of type sequence is: seq\n") }
}

sequence seqRemoveFirstFraction
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(0)\Bla::mc.removeFirstFraction(0.5)\Bla::mc.Bla::foutput
	;> { emit("the value of variable \"seqRemoveFirstFraction\" of type sequence is: seq\n") }
}

sequence seqRemoveLastFraction
{
	[[Bla::r(42),s(42)]]\Bla::mc.Bla::f(0)\Bla::mc.removeLastFraction(0.5)\Bla::mc.Bla::foutput
	;> { emit("the value of variable \"seqRemoveLastFraction\" of type sequence is: seq\n") }
}
