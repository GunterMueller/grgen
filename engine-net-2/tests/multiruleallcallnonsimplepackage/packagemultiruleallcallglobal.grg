#using "model.gm"

package Bar
{
	rule r(start:Node)
	{
		start --> n:N;
		if{ !n.visited; }
		
		def var v:int;
		yield { yield v = n.i; }

		modify {
			delete(n);
		}
	} \ orderAscendingBy<v>

	filter rf<r>(var n:int)
	{
		if(incident(this[0].start).empty()) {
			this.add(copy(this.peek()));
			this.rem();
		}
		emit("the value of variable \"Bar::rf\" of type string is: \"Bar::rf\"\n");
		emit("the value of variable \"Bar::rf.v\" of type int is: ", this[0].v, "\n");
	}
	
	sequence seq // one rule depending, one explicit
	{
		[[r(::n)\keepFirst(100)\orderAscendingBy<v>\rf(42),(m1:array<M>,::m2)=Foo::s()\keepFirst(100)\auto\orderAscendingBy<v>\Foo::shf(42)]]
		;> printNodeCounts
	}

	sequence seqGlobalEnforced // one global first, one explicit
	{
		[[r(::n)\keepFirst(100)\orderAscendingBy<v>\global::rf(42),(m1:array<M>,::m2)=Foo::s()\keepFirst(100)\auto\orderAscendingBy<v>\Foo::shf(42)]]
		;> printNodeCounts
	}
		
	sequence seqPackageApplyee // both rule depending
	{
		[[r(::n)\keepFirst(100)\orderAscendingBy<v>\rf(42),(m1:array<M>,::m2)=Foo::s()\keepFirst(100)\auto\orderAscendingBy<v>\shf(42)]]
		;> printNodeCounts
	}

	sequence seqPackageApplyeeGlobalEnforced // both global first
	{
		[[r(::n)\keepFirst(100)\orderAscendingBy<v>\global::rf(42),(m1:array<M>,::m2)=Foo::s()\keepFirst(100)\auto\orderAscendingBy<v>\global::shf(42)]]
		;> printNodeCounts
	}
}

filter rf<Bar::r>(var n:int)
{
	if(incident(this[0].start).empty()) {
		this.add(copy(this.peek()));
		this.rem();
	}
	emit("the value of variable \"rf\" of type string is: \"rf\"\n");
	emit("the value of variable \"rf.v\" of type int is: ", this[0].v, "\n");
}

package Foo
{
	rule init : (Node)
	{
		modify {
			start:Node --> n1:N;
			start --> n2:N;
			start --> n3:N;

			root:Node --> :M;
			root --> :M;
			
			eval {
				n1.i = 1;
				n2.i = 2;
				n3.i = 3;
				n3.visited = true;
			}
			
			return(start);
		}
	}
	
	rule s : (M, M)
	{
		root:Node --> m1:M;
		root --> m2:M;
		
		def var v:int;
		yield { yield v = 1; }

		modify {
			:N<root>;
			return(m1,m2);
		}
	} \ auto, orderAscendingBy<v>

	filter shf<s>(var f:int)
	{
		for(m:match<s> in this)
		{
			m.v = m.v * f;
		}
		emit("the value of variable \"Foo::shf\" of type string is: \"Foo::shf\"\n");
		emit("the value of variable \"Foo::shf.v\" of type int is: ", this[0].v, "\n");
	}
	
	sequence seq // one explicit, one rule depending
	{
		[[Bar::r(::n)\keepFirst(100)\orderAscendingBy<v>\Bar::rf(42),(m1:array<M>,::m2)=s()\keepFirst(100)\auto\orderAscendingBy<v>\shf(42)]]
		;> printNodeCounts
	}
	
	sequence seqGlobalEnforced // one explicit, one global first
	{
		[[Bar::r(::n)\keepFirst(100)\orderAscendingBy<v>\Bar::rf(42),(m1:array<M>,::m2)=s()\keepFirst(100)\auto\orderAscendingBy<v>\global::shf(42)]]
		;> printNodeCounts
	}

	sequence seqPackageApplyee // both rule depending
	{
		[[Bar::r(::n)\keepFirst(100)\orderAscendingBy<v>\rf(42),(m1:array<M>,::m2)=s()\keepFirst(100)\auto\orderAscendingBy<v>\shf(42)]]
		;> printNodeCounts
	}

	sequence seqPackageApplyeeGlobalEnforced // both global first
	{
		[[Bar::r(::n)\keepFirst(100)\orderAscendingBy<v>\rf(42),(m1:array<M>,::m2)=s()\keepFirst(100)\auto\orderAscendingBy<v>\global::shf(42)]]
		;> printNodeCounts
	}
}

filter shf<Foo::s>(var f:int)
{
	for(m:match<Foo::s> in this)
	{
		m.v = m.v * f;
	}
	emit("the value of variable \"shf\" of type string is: \"shf\"\n");
	emit("the value of variable \"shf.v\" of type int is: ", this[0].v, "\n");
}

sequence seq // filter functions explicit
{
	[[Bar::r(::n)\keepFirst(100)\orderAscendingBy<v>\Bar::rf(42),(m1:array<M>,::m2)=Foo::s()\keepFirst(100)\auto\orderAscendingBy<v>\Foo::shf(42)]]
	;> printNodeCounts
}

sequence seqPackageApplyee // rule depending - global last
{
	[[Bar::r(::n)\keepFirst(100)\orderAscendingBy<v>\rf(42),(m1:array<M>,::m2)=Foo::s()\keepFirst(100)\auto\orderAscendingBy<v>\shf(42)]]
	;> printNodeCounts
}

sequence seqPackageApplyeeGlobalEnforced // global first
{
	[[Bar::r(::n)\keepFirst(100)\orderAscendingBy<v>\global::rf(42),(m1:array<M>,::m2)=Foo::s()\keepFirst(100)\auto\orderAscendingBy<v>\global::shf(42)]]
	;> printNodeCounts
}

sequence printNodeCounts
{
	{ emit("the value of variable \"countNodes\" of type int is: ", countNodes(), "\n") }
	;> { emit("the value of variable \"countNodesN\" of type int is: ", countNodes(N), "\n") }
	;> { emit("the value of variable \"countNodesM\" of type int is: ", countNodes(M), "\n") }
}
