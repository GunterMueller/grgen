#using "quarantine.gm"

rule init
{
	modify {
		p0:Person@(name="Otto");
		p0 -:livesIn-> :Lodging@(type=LodgingType::HomeForTheElderly);
		p0 -:hasHabit-> :Habit@(type=HabitType::Smoking); p0 -:hasHabit-> :Habit@(type=HabitType::Drinking); p0 -:hasHabit-> :Habit@(type=HabitType::CardPlaying);
		p0 -:inHealthState-> :Illness@(organ=Organ::Lung, severity=90.0); p0 -:inHealthState-> :Illness@(organ=Organ::Liver, severity=30.0);
		
		p1:Person@(name="Hans");
		p1 -:livesIn-> :Lodging@(type=LodgingType::House);
		p1 -:hasHabit-> :Habit@(type=HabitType::Cycling); p1 -:hasHabit-> :Habit@(type=HabitType::Hiking); p1 -:hasHabit-> :Habit@(type=HabitType::Coding);
		p1 -:inHealthState-> :GoodHealth;
		
		p2:Person@(name="Franz");
		p2 -:livesIn-> :Lodging@(type=LodgingType::Flat);
		p2 -:hasHabit-> :Habit@(type=HabitType::Reading); p2 -:hasHabit-> :Habit@(type=HabitType::Coding);
		p2 -:inHealthState-> :Illness@(organ=Organ::Lung, severity=50.0);
		
		p3:Person@(name="Luise");
		p3 -:livesIn-> :Lodging@(type=LodgingType::Flat);
		p3 -:hasHabit-> :Habit@(type=HabitType::Cycling); p3 -:hasHabit-> :Habit@(type=HabitType::Coding); p3 -:hasHabit-> :Habit@(type=HabitType::Reading);
		p3 -:inHealthState-> :GoodHealth;
		
		p4:Person@(name="Annabel");
		p4 -:livesIn-> :Lodging@(type=LodgingType::House);
		p4 -:hasHabit-> :Habit@(type=HabitType::Drinking); p4 -:hasHabit-> :Habit@(type=HabitType::Reading); p4 -:hasHabit-> :Habit@(type=HabitType::WatchingTV);
		p4 -:inHealthState-> :Illness@(organ=Organ::Liver, severity=50.0); p4 -:inHealthState-> :Illness@(organ=Organ::Kidney, severity=50.0);
		
		p5:Person@(name="Gudrun");
		p5 -:livesIn-> :Lodging@(type=LodgingType::HomeForTheElderly);
		p5 -:hasHabit-> :Habit@(type=HabitType::Reading); p5 -:hasHabit-> :Habit@(type=HabitType::WatchingTV);
		p5 -:inHealthState-> :GoodHealth;

		p6:Person@(name="Wilhelm");
		p6 -:livesIn-> :Lodging@(type=LodgingType::Barracks);
		p6 -:hasHabit-> :Habit@(type=HabitType::Shooting); p6 -:hasHabit-> :Habit@(type=HabitType::CardPlaying);
		p6 -:inHealthState-> :GoodHealth;
		
		p7:Person@(name="Häschen");
		p7 -:livesIn-> :Lodging@(type=LodgingType::Staple);
		p7 -:hasHabit-> :Habit@(type=HabitType::Schnuffeln);
		p7 -:inHealthState-> :GoodHealth;
		
		p8:Person@(name="Vollmeise");
		p8 -:livesIn-> :Lodging@(type=LodgingType::Nest);
		p8 -:hasHabit-> :Habit@(type=HabitType::Twittern);
		p8 -:inHealthState-> :Illness@(organ=Organ::Lung, severity=20.0);
	}
}

rule addDuplicate
{
	p0:Person;
	if{ p0.name=="Otto"; }
	
	modify {
		p0 -:livesIn-> :Lodging@(type=LodgingType::HomeForTheElderly);
	}
}

match class QuarantineScore
{
	person:Person;
	def var score:double;
} \keepOneForEach<person>Accumulate<score>By<sum>, keepOneForEach<person>, orderDescendingBy<score>
// in iterated bottom-up yielding to nesting entity possible, in rules not available 
// would require def parameters - shared over all independent matches
// instead keepOneForEach<>Accumulate<>By<>
// potential todo: RHS for match class, RHS is duplicated over rules

rule quarantineByRiskLodging implements QuarantineScore
{
	person:Person -:livesIn-> l:Lodging;
	if { l.type == LodgingType::HomeForTheElderly; }
---
	def var score:double = 100.0;
	
	modify {
		person -:underQuarantine-> person;
	}
} \ keepOneForEach<person>

rule quarantineByRiskHabit implements QuarantineScore
{
	person:Person -:hasHabit-> h:Habit;
	if { h.type == HabitType::Smoking; }
---
	def var score:double = 100.0;

	modify {
		person -:underQuarantine-> person;
	}
}

rule quarantineByRiskIllness implements QuarantineScore
{
	person:Person -:inHealthState-> i:Illness;
	if { i.organ == Organ::Lung; }
---
	def var score:double = i.severity;

	modify {
		person -:underQuarantine-> person;
	}
}

sequence printQuarantine
{
	{ emit( "Evaluating Sequence Expression done after 0.0 ms with result: ",
		[?[quarantineByRiskLodging, quarantineByRiskHabit, quarantineByRiskIllness]
			\QuarantineScore.keepOneForEach<person>Accumulate<score>By<sum>
			\QuarantineScore.orderDescendingBy<score>\<class QuarantineScore>], "\n"); }
}

sequence printQuarantineArray
{
	{ emit( "Evaluating Sequence Expression done after 0.0 ms with result: ",
		keepOneAccumulate([?[quarantineByRiskLodging, quarantineByRiskHabit, quarantineByRiskIllness]\<class QuarantineScore>])
			/*.orderDescendingBy<score>()*/, "\n"); }
}

function keepOneAccumulate(ref matchesSameCompany:array<match<class QuarantineScore>>) : array<match<class QuarantineScore>>
{
	auto(matchesSameCompany.keepOneForEach<person>Accumulate<score>By<sum>)
}

sequence printQuarantineSimpleLodgingOnlyMC
{
	{ emit( "Evaluating Sequence Expression done after 0.0 ms with result: ",
		[?[quarantineByRiskLodging]\QuarantineScore.keepOneForEach<person>\<class QuarantineScore>], "\n"); }
}

sequence printQuarantineSimpleLodgingOnly
{
	{ emit( "Evaluating Sequence Expression done after 0.0 ms with result: ",
		[?quarantineByRiskLodging\keepOneForEach<person>], "\n"); }
}

sequence printQuarantineSimpleLodgingOnlyKeepOneAccumulateArray
{
	{ emit( "Evaluating Sequence Expression done after 0.0 ms with result: ",
		keepOneAccumulateLodging([?quarantineByRiskLodging]), "\n"); }
}

function keepOneAccumulateLodging(ref matchesSameCompany:array<match<quarantineByRiskLodging>>) : array<match<quarantineByRiskLodging>>
{
	auto(matchesSameCompany.keepOneForEach<person>Accumulate<score>By<sum>)
}

rule quarantineTopmost(var num:int)
{
	modify {
	---
		exec([[quarantineByRiskLodging, quarantineByRiskHabit, quarantineByRiskIllness]
				\QuarantineScore.keepOneForEach<person>Accumulate<score>By<sum>
				\QuarantineScore.orderDescendingBy<score>
				\QuarantineScore.keepFirst(num)]);
	}
}

test underQuarantine
{
	person:Person -:underQuarantine-> person;
}

rule quarantineByRiskLodgingIterated
{
	iterated it {
		person:Person -:livesIn-> l:Lodging;
		if { l.type == LodgingType::HomeForTheElderly; }
	---
		def var score:double = 100.0;
		
		modify {
		}
	} \ keepOneForEach<person>
---
	iterated it\keepOneForEach<person>;

	modify {
	---
		emit( "Evaluating Sequence Expression done after 0.0 ms with result: ",
			[?it], "\n");
	}
}

rule printQuarantineSimpleLodgingOnlyArray(ref a:array<Person>)
{
	if { a.keepOneForEach().size() <= 9; }
	
	modify {
	---
		emit( "Evaluating Sequence Expression done after 0.0 ms with result: ",
			a.keepOneForEach(), "\n");
	}
}

rule wrapPersons
{
	p:Person;
	
	modify {
		:PersonWrapper@(person=p);
	}
}

rule printQuarantineSimpleLodgingOnlyArrayWrapped(ref a:array<PersonWrapper>)
{
	if { a.keepOneForEach<person>().size() <= 9; }
	
	modify {
	---
		emit( "Evaluating Sequence Expression done after 0.0 ms with result: ",
			a.keepOneForEach<person>(), "\n");
	}
}

/*
no support for keepOneForEachAccumulateBy on node/edge types (which would be possible in general)
because of the unexpected side-effect of writing the accumulation result to the node/edge in the graph

rule initQS
{
	modify {
		:QS@(person = "Emeli", type = LodgingType::House, score = 100.0);
		:QS@(person = "Eumeli", type = LodgingType::Flat, score = 50.0);
		:QS@(person = "Eumeli", type = LodgingType::Staple, score = -50.0);
		:QS@(person = "Ulli", type = LodgingType::HomeForTheElderly, score = 200.0);
		:QS@(person = "Schnulli", type = LodgingType::Barracks, score = 70.0);
		:QS@(person = "Retourkutschenvieh", type = LodgingType::Staple, score = 120.0);
		:QS@(person = "Krähe", type = LodgingType::Nest, score = 90.0);
		:QS@(person = "Bob ze builder", type = LodgingType::House, score = 150.0);
	}
}

sequence printQS
{
	{ emit( "Evaluating Sequence Expression done after 0.0 ms with result: ",
		printQSArray(keepOneAccumulateQS(array<QS>(nodes(QS).asArray()))), "\n"); }
}

function keepOneAccumulateQS(ref qs:array<QS>) : array<QS>
{
	auto(qs.keepOneForEach<person>Accumulate<score>By<sum>)
}

function printQSArray(ref arr:array<QS>) : string
{
	def var result:string = "[";
	def var first:boolean = true; 
	for(qs:QS in arr) {
		if(!first) {
			result = result + ",";
		} else {
			first = false;
		}
		result = result + "<" + "person:" + qs.person + ",type:" + qs.type + ",score:" + qs.score + ">";
	}
	return(result + "]");
}
*/