rule init : (Node)
{
	modify {
		n:Node --> m:Node;
		return(n);
	}
}

match class empty
{
}

rule r(n:Node) : (Node) implements empty
{
	n --> m:Node;
	
	modify {
		return(m);
	}
}

test b(var b:boolean)
{
	n:Node --> m:Node;
	if{ !b; }	
}

test t implements empty
{
	n:Node --> .;
}

sequence seqEmitRuleQuery
{
	{ emit("the value of variable \"rule\" of type evaluation is: ", ![?r(::start1)].empty(), "\n") }
}

sequence seqExecTestRuleQuery
{
	b([?t].empty())
}

sequence seqExecRuleRuleQuery
{
	b([?r(::start1)].empty())
}

sequence seqEmitMultiRuleQuery
{
	{ emit("the value of variable \"rule\" of type evaluation is: ", ![?[r(::start1)]\<class empty>].empty(), "\n") }
}

sequence seqExecTestMultiRuleQuery
{
	b([?[t]\<class empty>].empty())
}

sequence seqExecRuleMultiRuleQuery
{
	b([?[r(::start1)]\<class empty>].empty())
}

sequence seqAssignArrayOfMatch
{
	{ x:array<match<t>>=[?t]; emit("the value of variable \"rule\" of type evaluation is: ", x, "\n") }
}

sequence seqAssignArrayOfMatchClass
{
	{ x:array<match<class empty>>=[?[t]\<class empty>]; emit("the value of variable \"rule\" of type evaluation is: ", x, "\n") }
}
