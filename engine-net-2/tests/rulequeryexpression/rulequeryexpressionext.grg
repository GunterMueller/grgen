#using "model.gm"

rule init : (Node, Node)
{
	modify {
		n:Node --> m:N --> l:N;
		
		eval { 
			m.i = 42;
			l.i = 43;
		}
		
		return(n, m);
	}
}

rule r(n:Node) : (N)
{
	n --> m:N;
---	
	def var i:int;
	yield { yield i = m.i; }
	
	modify {
		return(m);
	}
}

sequence seqEmitRuleQuery
{
	{ emit("the value of variable \"i\" of type evaluation is: ", [?r(::start1)].peek().i, "\n") }
	;> { emit("the value of variable \"ni\" of type evaluation is: ", [?r(::start1)].peek().m.i, "\n") }
	;> { emit("the value of variable \"i\" of type evaluation is: ", [?r(::start2)].peek().i, "\n") }
	;> { emit("the value of variable \"ni\" of type evaluation is: ", [?r(::start2)].peek().m.i, "\n") }
}

sequence seqExecRuleRecQuery
{
	r([?r(::start1)].peek().m)
}

sequence seqExecRuleRecExtQuery
{
	r([?r(::start1)].empty() ? (N)::start1 : [?r(::start1)].peek().m)
}

sequence seqExecRuleRecRecQuery
{
	r([?r([?r(::start1)].peek().m)].peek().m)
}

sequence seqExecRuleRecRecExtQuery
{
	r([?r([?r(::start2)].peek().m)].empty() ? (N)::start2 : [?r([?r(::start2)].peek().m)].peek().m)
}
