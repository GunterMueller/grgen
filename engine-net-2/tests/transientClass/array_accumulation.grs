new graph "transientClass/array_accumulation.grg"

exec { ::a = array<Simple>[]; ::v=new Simple(); ::v.i = 1; ::v.j = 2; ::a.add(::v); ::v=new Simple(); ::v.i = 0; ::v.j = 1; ::a.add(::v); ::v=new Simple(); ::v.i = 2; ::v.j = 3; ::a.add(::v); ::v=new Simple(); ::v.i = 1; ::v.j = 2; ::a.add(::v) }

show var a

exec (::o)=aextract(::a)

show var o

exec { ::a = array<Simple>[]; ::v=new Simple(); ::v.i = 1; ::v.j = 2; ::a.add(::v); ::v=new Simple(); ::v.i = 0; ::v.j = 1; ::a.add(::v); ::v=new Simple(); ::v.i = 2; ::v.j = 3; ::a.add(::v); ::v=new Simple(); ::v.i = 1; ::v.j = 2; ::a.add(::v) }

show var a

exec (::o)=aascending(::a)

show var o

exec { ::a = array<Simple>[]; ::v=new Simple(); ::v.i = 1; ::v.j = 2; ::a.add(::v); ::v=new Simple(); ::v.i = 0; ::v.j = 1; ::a.add(::v); ::v=new Simple(); ::v.i = 2; ::v.j = 3; ::a.add(::v); ::v=new Simple(); ::v.i = 1; ::v.j = 2; ::a.add(::v) }

show var a

exec (::o)=adescending(::a)

show var o

exec { ::a = array<Simple>[]; ::v=new Simple(); ::v.i = 1; ::v.j = 2; ::a.add(::v); ::v=new Simple(); ::v.i = 0; ::v.j = 1; ::a.add(::v); ::v=new Simple(); ::v.i = 2; ::v.j = 3; ::a.add(::v); ::v=new Simple(); ::v.i = 1; ::v.j = 2; ::a.add(::v) }

show var a

exec (::o)=aoneforeach(::a)

show var o

exec { ::a = array<Simple>[]; ::v=new Simple(); ::v.i = 1; ::v.j = 2; ::a.add(::v); ::v=new Simple(); ::v.i = 0; ::v.j = 1; ::a.add(::v); ::v=new Simple(); ::v.i = 2; ::v.j = 3; ::a.add(::v); ::v=new Simple(); ::v.i = 1; ::v.j = 2; ::a.add(::v) }

show var a

exec (::o)=agroupby(::a)

show var o

quit
