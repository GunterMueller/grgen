
unit Test;

node class N1 extends Node {
  x:boolean;
} 

node class N2 extends N1 {
  b: int;
}

edge class E1 extends Edge {
  a: int;
}


  rule RuleA {
    pattern {
      a:N1 -> b:N2 -E1-> c:Node;
    }
    cond {
      2 + 3 + 4 < 2 * 12 && false && a.x;
    }
    replace {
      a::Node -E1-> b -> c;
    }
  }
/*
  rule RuleB {
    pattern {
      a:N1 -E1-> b:N2 -> c:Node;
    }
    replace {
      a -> b -E1-> c;
    }
  }

  rule RuleC {
    pattern {
      a:N1 -E1-> b:N2 -> c:Node;
    }
    replace {
      a -> d:Node;
    }
    redirect {
      d: b -> Node;
      d: b <-E1- Node;
    }
  }

/*
  test RuleD(in int i, out int b) {
    pattern {
      a:N1 -E1-> b:Node;
    }
    eval {
      b = b.a;
    }
  }
  */
