/*
 * GrGen: graph rewrite generator tool -- release GrGen.NET 5.0
 * Copyright (C) 2003-2020 Universitaet Karlsruhe, Institut fuer Programmstrukturen und Datenorganisation, LS Goos; and free programmers
 * licensed under LGPL v3 (see LICENSE.txt included in the packaging of this file)
 * www.grgen.net
 */

/**
 * @author Edgar Jakumeit
 */

package de.unika.ipd.grgen.ast;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Vector;

import de.unika.ipd.grgen.ast.util.DeclarationTypeResolver;
import de.unika.ipd.grgen.ir.DefinedMatchType;
import de.unika.ipd.grgen.ir.IR;
import de.unika.ipd.grgen.ir.MatchClassFilterAutoGenerated;
import de.unika.ipd.grgen.parser.Coords;


/**
 * AST node class representing declarations of auto-generated match class filter functions
 */
public class MatchClassFilterAutoGeneratedNode extends BaseNode implements MatchClassFilterCharacter {
	static {
		setName(MatchClassFilterFunctionDeclNode.class, "match filter function declaration");
	}
	
	protected String name;
	protected ArrayList<String> entities; // null for auto, otherwise list with at least one element

	protected IdentNode matchTypeUnresolved;
	protected DefinedMatchTypeNode matchType;

	public MatchClassFilterAutoGeneratedNode(Coords coords, String name, ArrayList<String> entities, IdentNode matchType) {
		super(coords);
		this.name = name;
		this.entities = entities;
		this.matchTypeUnresolved = matchType;
	}

	/** returns children of this node */
	@Override
	public Collection<BaseNode> getChildren() {
		Vector<BaseNode> children = new Vector<BaseNode>();
		children.add(matchTypeUnresolved);
		return children;
	}

	/** returns names of the children, same order as in getChildren */
	@Override
	public Collection<String> getChildrenNames() {
		Vector<String> childrenNames = new Vector<String>();
		childrenNames.add("matchType");
		return childrenNames;
	}

	private static final DeclarationTypeResolver<DefinedMatchTypeNode> matchTypeResolver =
			new DeclarationTypeResolver<DefinedMatchTypeNode>(DefinedMatchTypeNode.class);

	/** @see de.unika.ipd.grgen.ast.BaseNode#resolveLocal() */
	@Override
	protected boolean resolveLocal() {
		if(!(matchTypeUnresolved instanceof PackageIdentNode)) {
			fixupDefinition(matchTypeUnresolved, matchTypeUnresolved.getScope());
		}
		matchType = matchTypeResolver.resolve(matchTypeUnresolved, this);
		return matchType != null;
	}

	/** @see de.unika.ipd.grgen.ast.BaseNode#resolveLocal() */
	@Override
	protected boolean checkLocal() {
		if(entities==null) {
			if(!name.equals("auto")) {
				reportError("Unknown auto-generated filter " + name);
				return false;
			}
			return true;
		}
		if(!name.equals("orderAscendingBy")
			&& !name.equals("orderDescendingBy")
			&& !name.equals("groupBy")
			&& !name.equals("keepSameAsFirst")
			&& !name.equals("keepSameAsLast")
			&& !name.equals("keepOneForEach")) {
				reportError("Unknown auto-generated filter " + name + " for def-variable(s) " + String.join(",", entities));
				return false;
		}
		return true;
	}

	public String getFilterName() {
		return name;
	}
	
	public String getFilterNameWithEntitySuffix() {
		StringBuilder sb = new StringBuilder();
		sb.append(name);
		if(entities != null && !entities.isEmpty()) {
			sb.append("<");
			boolean first = true;
			for(String entity : entities) {
				if(first)
					first = false;
				else
					sb.append(",");
				sb.append(entity);
			}
			sb.append(">");
		}
		return sb.toString();
	}

	public DefinedMatchTypeNode getMatchTypeNode()	{
		return matchType;
	}

	/** Returns the IR object for this autogen filter node. */
    public MatchClassFilterAutoGenerated getMatchClassFilterAutoGenerated() {
        return checkIR(MatchClassFilterAutoGenerated.class);
    }
    
	@Override
	protected IR constructIR() {
		// return if the IR object was already constructed
		// that may happen in recursive calls
		if (isIRAlreadySet()) {
			return getIR();
		}

		MatchClassFilterAutoGenerated filterAutoGen = new MatchClassFilterAutoGenerated(name, entities);

		// mark this node as already visited
		setIR(filterAutoGen);

		DefinedMatchType definedMatchType = matchType.checkIR(DefinedMatchType.class);
		filterAutoGen.setMatchClass(definedMatchType);
		definedMatchType.addMatchClassFilter(filterAutoGen);
		
		return filterAutoGen;
	}
}


