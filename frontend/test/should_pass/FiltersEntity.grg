test filterNode
{
	n:Node;	
} \ keepSameAsFirst<n>, keepSameAsLast<n>, keepOneForEach<n>, groupBy<n>

test filterNodeDef
{
	x:Node;
---
	def var n:Node = x;	
} \ keepSameAsFirst<n>, keepSameAsLast<n>, keepOneForEach<n>, groupBy<n>

test filterEdge
{
	-e:Edge->;	
} \ keepSameAsFirst<e>, keepSameAsLast<e>, keepOneForEach<e>, groupBy<e>

test filterEdgeDef
{
	-x:Edge->;
---
	def var e:Edge = x;	
} \ keepSameAsFirst<e>, keepSameAsLast<e>, keepOneForEach<e>, groupBy<e>

sequence seq
{
	[filterNode\keepSameAsFirst<n>\keepSameAsLast<n>\keepOneForEach<n>\groupBy<n>] ;>
	[filterNodeDef\keepSameAsFirst<n>\keepSameAsLast<n>\keepOneForEach<n>\groupBy<n>] ;>
	[filterEdge\keepSameAsFirst<e>\keepSameAsLast<e>\keepOneForEach<e>\groupBy<e>] ;>
	[filterEdgeDef\keepSameAsFirst<e>\keepSameAsLast<e>\keepOneForEach<e>\groupBy<e>]
}
