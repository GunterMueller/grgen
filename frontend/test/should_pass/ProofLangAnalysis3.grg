using ProofLangModel;

pattern getParent(proofstep:NamedItem --- def parent:NamedItem)
{
---
    yield
    {
        yield parent = proofstep;
    }
}

rule InsertEdge(step1:NamedItem, step2:NamedItem)
{
    modify {
        step1 -:ast->step2;
	---
        emit ("insert edge");
    }
}

rule rsubproofsteps(firststep:NamedItem, ref idset:set<NamedItem>)
{
	modify {
	}
}

rule test1(ref idset:set<NamedItem>)
{
	pred:NamedItem;
	firststep:NamedItem;
    :getParent(pred --- yield parent);
---
    def parent:NamedItem;
    modify {
	---
        exec (rsubproofsteps(firststep, idset) ;> for {::step in idset; InsertEdge(parent, ::step)} );
    }
} 
