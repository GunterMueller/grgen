using array_model_001;

test ti(var x:int, var y:int)
{
}

test td(var x:double, var y:double)
{
}

test tb(var x:boolean, var y:boolean)
{
}

rule sum {
	a:A;
	
	modify {
	---
		exec(ti(array<int>[1,2].sum(), a.spiceArray.sum()));
	}
}

rule prod {
	a:A;

	modify {
	---
		exec(ti(array<int>[1,2].prod(), a.spiceArray.prod()));
	}
}

rule min {
	a:A;

	modify {
	---
		exec(ti(array<int>[1,2].min(), a.spiceArray.min()));
	}
}

rule max {
	a:A;

	modify {
	---
		exec(ti(array<int>[1,2].max(), a.spiceArray.max()));
	}
}

rule avg {
	a:A;

	modify {
	---
		exec(td(array<int>[1,2].avg(), a.spiceArray.avg()));
	}
}

rule med {
	a:A;

	modify {
	---
		exec(td(array<int>[1,2].med(), a.spiceArray.med()));
	}
}

rule medUnordered {
	a:A;

	modify {
	---
		exec(td(array<int>[1,2].medUnordered(), a.spiceArray.medUnordered()));
	}
}

rule var {
	a:A;

	modify {
	---
		exec(td(array<int>[1,2].var(), a.spiceArray.var()));
	}
}

rule dev {
	a:A;

	modify {
	---
		exec(td(array<int>[1,2].dev(), a.spiceArray.dev()));
	}
}

rule and {
	a:A;

	modify {
	---
		exec(tb(array<boolean>[true,false].and(), a.shiceArray.and()));
	}
}

rule or {
	a:A;

	modify {
	---
		exec(tb(array<boolean>[true,false].or(), a.shiceArray.or()));
	}
}
