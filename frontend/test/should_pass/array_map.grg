#using "array_map.gm"

rule array_map(ref a:array<int>, var x:int, ref aa:array<N>) {
	n:Node;
	nn:N;
	
	if {
		a.map<double>{/*key:int ->*/value:int -> value * Math::pi() + x + (nameof(n)!="$0" ? 1 : 0)} != a.map<string>{value:int -> value}.map<double>{value:string -> Math::pi()};
		aa.map<Node>{value:Node -> nn}.empty();
	}
	
	modify {
		eval {
			def var y:int = 42;
			def ref ra:array<double> = a.map<double>{value:int -> value*Math::pi() + y + (nameof(n)!="$0" ? 1 : 0)};
			def ref raa:array<Node> = aa.map<Node>{value:Node -> nn};
		}
	}
}
