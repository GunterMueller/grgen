using defYield;

rule t
{
	pp:p(--- yield x);
---
	def x:Node;
	
	modify {
		pp(--- yield y);
	---
		def y:Node;
		def var z:boolean;
		eval { yield z = typeof(x)>=A; }
		eval { yield z = typeof(y)>=A; }
	}
}

pattern p(--- def x:Node) modify(--- def z:Node)
{
	y:Node;
---
	yield { yield x = y; }
	
	modify {
		u:Node;
	---
		eval { yield z = u; }
	}
}

