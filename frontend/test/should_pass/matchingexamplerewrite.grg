#using "matchingexample.gm"

rule r(a:Node) : (Node, int, Node, int)
{
	a --> b:Node;
	p:P(b --- yield d);
	optional o {
		a --> . --> c:N;
	---
		yield {	yield i = c.i; }
		
		modify {
		---
			eval { yield j = i + u.i; }
		}
	}
---
	def var i:int;
	def d:Node;
	
	modify {
		b --> u:N;
		p(u --- yield e);
	---
		def e:Node;
		def var j:int;
		return(d, i, e, j);
	}
}

pattern P(n:Node --- def rm:Node) modify(k:Node --- def x:Node)
{
	n --> . --> m:Node;
---
	yield {	yield rm = m; }
	
	modify {
		m --> k;
		m --> l:Node;
	---
		eval { yield x = l; }
	}
}
