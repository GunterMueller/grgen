#using "model.gm"

rule r(start:Node) implements shared
{
	start --> n:Node;
	if{ !n.visited; }
	
	def var v:int;
	def var w:double;
	def x:Node;

	modify {
		delete(n);
	}
}

rule s : (M, M) implements shared
{
	root:Node --> m1:M;
	root --> m2:M;
	
	def var v:int;
	def var w:double;
	def x:Node;

	modify {
		:N<root>;
		return(m1,m2);
	}
}

sequence seq
{
	[[r(::n),(m1:array<M>,::m2)=s()]]\shared.shf(42)\shared.orderAscendingBy<v,w>\shared.orderAscendingBy<v>\shared.orderDescendingBy<v,w>\shared.orderDescendingBy<v>\shared.keepSameAsFirst<v>\shared.keepSameAsLast<v>\shared.keepOneForEach<v>
\shared.keepFirst(2)\shared.keepLast(2)\shared.keepFirstFraction(0.42)\shared.keepLastFraction(0.42)\shared.removeFirst(2)\shared.removeLast(2)\shared.removeFirstFraction(0.42)\shared.removeLastFraction(0.42)
}

match class shared
{
	def var v:int;
	def var w:double;
	def x:Node;
}\orderAscendingBy<v,w>,orderAscendingBy<v>,orderDescendingBy<v,w>,orderDescendingBy<v>,keepSameAsFirst<v>,keepSameAsLast<v>,keepOneForEach<v>

filter shf<class shared>(var f:int)
{
	for(m:match<class shared> in this)
	{
		m.v = m.v * f;
	}
}
