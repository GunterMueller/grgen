#using "model.gm"

rule r(start:Node, var vi:int) implements shared
{
	start --> n:Node;
	if{ !n.visited; }
	
	xi:Node;
---
	def var v:int;
	def x:Node;
	
	modify {
		delete(n);
	}
}

rule s(var vi:int) : (M, M) implements shared
{
	root:Node --> m1:M;
	root --> m2:M;

	xi:Node;
---
	def var v:int;
	def x:Node;

	modify {
		:N<root>;
		return(m1,m2);
	}
}

sequence seq
{
	[[r(::n, 42),(m1:array<M>,::m2)=s(42)]\shared.shf(42)]
}

match class shared
{
	var vi:int;
	xi:Node;

	def var v:int;
	def x:Node;	
}

filter shf<class shared>(var f:int)
{
	for(m:match<class shared> in this)
	{
		m.v = m.v * f + m.vi + countIncident(m.xi);
	}
}
